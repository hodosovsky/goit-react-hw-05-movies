{"version":3,"file":"static/js/824.35601598.chunk.js","mappings":"uMAEMA,E,OAAiBC,GAAAA,GAAH,sf,kBCGPC,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACL,EAAD,UACGG,EAAMG,KAAI,SAAAC,GAAI,eACb,yBACE,UAAC,KAAD,CACEC,UAAU,YACVC,GAAE,kBAAaF,EAAKG,IACpBC,MAAO,CAAEC,KAAMR,GAHjB,WAKE,gBACES,IACM,OAAJN,QAAI,IAAJA,GAAAA,EAAMO,YACF,kCAAoCP,EAAKO,YACzCC,EAENC,IAAG,UAAET,EAAKU,aAAP,QAAgBV,EAAKW,KACxBC,MAAM,SAER,kBAdF,UAeGZ,EAAKU,aAfR,QAeiBV,EAAKW,SAhBfX,EAAKG,GADD,OAwBtB,C,oHC/BYU,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOL,EAAP,KAAcM,EAAd,KAoBA,OACE,kBAAMF,SAfa,SAAAG,GACnBA,EAAEC,iBACY,KAAVR,IAGJI,EAASJ,GARTM,EAAS,IAUTC,EAAEE,OAAOC,QACV,EAOC,WACE,4BACE,kBACEC,KAAK,OACLV,KAAK,QACLW,YAAY,qBACZC,SAXa,SAAAN,GACnBD,EAASC,EAAEE,OAAOK,MAAMC,cACzB,OAYG,mBAAQJ,KAAK,SAAb,sBAGL,E,SCqBD,EAnDmB,WAAO,IAAD,EAEvB,GAA0CN,EAAAA,EAAAA,UAAS,IAAnD,eAAOW,EAAP,KAAsBC,EAAtB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACM,KAAVF,IAGJG,EAAAA,EAAAA,IAAiBH,GAAOI,MAAK,SAAAC,GAC3BT,EAAiBS,EAAKA,KAAKC,QAC5B,GACF,GAAE,CAACN,IAMJ,OACE,4BACE,SAAClB,EAAD,CAAYC,SANQ,SAAAU,GACtBM,EAA0B,KAAVN,EAAe,CAAEO,MAAOP,GAAU,CAAC,EACpD,IAK6B,IAAzBE,EAAcY,QAA0B,KAAVP,IAAgB,sCAC9CL,EAAcY,OAAS,IACtB,SAAC3C,EAAA,EAAD,CAAUC,MAAO8B,MAwBxB,C,+LCvDKa,EAAU,mCACHC,EAAc,mCAAG,oGACTC,EAAAA,EAAAA,IAAA,kEAC0CF,IAFjC,cACtBH,EADsB,yBAKrBA,GALqB,2CAAH,qDA0BdM,EAAc,mCAAG,WAAMC,GAAN,uFACTF,EAAAA,EAAAA,IAAA,6CACqBE,EADrB,oBACwCJ,IAF/B,cACtBH,EADsB,yBAKrBA,GALqB,2CAAH,sDAQdQ,EAAc,mCAAG,WAAMD,GAAN,uFACTF,EAAAA,EAAAA,IAAA,6CACqBE,EADrB,4BACgDJ,IAFvC,cACtBH,EADsB,yBAKrBA,GALqB,2CAAH,sDAQdS,EAAgB,mCAAG,WAAMF,GAAN,uFACXF,EAAAA,EAAAA,IAAA,6CACqBE,EADrB,4BACgDJ,IAFrC,cACxBH,EADwB,yBAKvBA,GALuB,2CAAH,sDAQhBF,EAAgB,mCAAG,WAAMY,GAAN,uFACXL,EAAAA,EAAAA,IAAA,0DACkCK,EADlC,oBACuDP,IAF5C,cACxBH,EADwB,yBAKvBA,GALuB,2CAAH,qD","sources":["components/Film.List/FilmList.styled.jsx","components/Film.List/FilmList.jsx","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","services/ApiService.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst FilmListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  gap: 20px;\n\n  & li {\n    padding-top: 5px;\n    padding-bottom: 5px;\n    width: 150px;\n    text-align: center;\n    border: 1px solid gray;\n    border-radius: 10px;\n    transition: scale 250ms linear;\n\n    &:hover {\n      scale: 1.1;\n    }\n\n    &:hover a {\n      color: blue;\n    }\n\n    & a {\n      display: block;\n      height: 100%;\n      text-decoration: none;\n      color: grey;\n    }\n  }\n`;\n\nexport { FilmListStyled };\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FilmListStyled } from './FilmList.styled';\nimport defaultposter from '../../images/default-poster.png';\n\nexport const FilmList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <>\n      <FilmListStyled>\n        {films.map(film => (\n          <li key={film.id}>\n            <Link\n              className=\"film-link\"\n              to={`/movies/${film.id}`}\n              state={{ from: location }}\n            >\n              <img\n                src={\n                  film?.poster_path\n                    ? 'https://image.tmdb.org/t/p/w500' + film.poster_path\n                    : defaultposter\n                }\n                alt={film.title ?? film.name}\n                width=\"100\"\n              ></img>\n              <br />\n              {film.title ?? film.name}\n            </Link>\n          </li>\n        ))}\n      </FilmListStyled>\n    </>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.array.isRequired,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n\n  const reset = () => {\n    setTitle('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (title === '') {\n      return;\n    }\n    onSubmit(title);\n    reset();\n    e.target.reset();\n  };\n\n  const handleChange = e => {\n    setTitle(e.target.value.toLowerCase());\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n          type=\"text\"\n          name=\"input\"\n          placeholder=\"Enter film's title\"\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\">search</button>\n    </form>\n  );\n};\nSearchForm.propTypes = {\n  films: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FetchByMovieName } from 'services/ApiService';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\n// import { FilmSearchedList } from './MoviesPage.styled';\nimport { FilmList } from 'components/Film.List/FilmList';\n\nconst MoviesPage = () => {\n  // const location = useLocation();\n  const [searchedFilms, setSearchedFilms] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    FetchByMovieName(query).then(data => {\n      setSearchedFilms(data.data.results);\n    });\n  }, [query]);\n\n  const handleSearhFilm = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  return (\n    <div>\n      <SearchForm onSubmit={handleSearhFilm} />\n      {searchedFilms.length === 0 && query !== '' && <h1>Not found</h1>}\n      {searchedFilms.length > 0 && (\n        <FilmList films={searchedFilms} />\n        /* <FilmSearchedList>\n          {searchedFilms.map(item => (\n            <li key={item.id}>\n              <Link to={`${Number(item.id)}`} state={{ from: location }}>\n                <img\n                  src={\n                    item?.poster_path\n                      ? 'https://image.tmdb.org/t/p/w500' + item.poster_path\n                      : defaultposter\n                  }\n                  alt={item.title ?? item.title}\n                  width=\"100\"\n                ></img>\n\n                <br />\n                {item.title}\n              </Link>\n            </li>\n          ))}\n        </FilmSearchedList> */\n      )}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nconst API_KEY = 'dc1eafce510836ca61a79dd47f826d41';\nexport const FetchTopMovies = async () => {\n  const data = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\n// export async function FetchMovieByID(movieId) {\n//   return fetch(\n//     `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n//   )\n//     .then(res => {\n//       if (res.status >= 200 && res.status < 300) {\n//         return res.json();\n//       } else {\n//         let error = new Error(res.statusText);\n//         error.response = res;\n//         throw error;\n//       }\n//     })\n//     .then(data => data)\n//     .catch(error => error);\n\n// }\n\nexport const FetchMovieByID = async movieId => {\n  const data = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const FetchMovieCast = async movieId => {\n  const data = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const FetchMovieReview = async movieId => {\n  const data = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const FetchByMovieName = async movieName => {\n  const data = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${movieName}&api_key=${API_KEY}`\n  );\n\n  return data;\n};\n"],"names":["FilmListStyled","styled","FilmList","films","location","useLocation","map","film","className","to","id","state","from","src","poster_path","defaultposter","alt","title","name","width","SearchForm","onSubmit","useState","setTitle","e","preventDefault","target","reset","type","placeholder","onChange","value","toLowerCase","searchedFilms","setSearchedFilms","useSearchParams","searchParams","setSearchParams","query","get","useEffect","FetchByMovieName","then","data","results","length","API_KEY","FetchTopMovies","axios","FetchMovieByID","movieId","FetchMovieCast","FetchMovieReview","movieName"],"sourceRoot":""}